Write a function that takes a square matrix ar, and the array sizes for the rows and columns as parameters, 
and returns the transpose of the array via call by reference. 
For example, if the rowSize is 4, colSize is 4, and the array ar is {1,2,3,4, 5,1,2,2, 6,3,4,4, 7,5,6,7}, 
then the resultant array will be {1,5,6,7, 2,1,3,5, 3,2,4,6, 4,2,4,7}. That is, for the 4‐by‐4 matrix: 1234 5122 6344 7567
the resultant array after performing the transpose2D function is:
1567 2135 3246 4247
The function prototype is given below:
void transpose2D(int ar[][SIZE], int rowSize, int colSize);
SIZE is a constant defined at the beginning of the program. For example, #define SIZE 10. 
The parameters rowSize and colSize are used to specify the dimensions of the 2‐ dimensional array (e.g. 4x4) that the function should process.
Write a program to test the function.



#include <stdio.h>
const int size = 4;
void t2d(int ar[4][size], int rowSize, int colSize);

int main() {
    int i,j;
    int ar[4][4] = {1,2,3,4, 5,1,2,2, 6,3,4,4, 7,5,6,7};
    t2d(ar[4][4], 4, 4);
    for (i=0;i<4;i++){
        printf("\n");
        for (j=0;j<4;j++){
            printf("%d", ar[j][i]);}}
    return 0;
}
void t2d(int ar[4][size], int rowSize, int colSize){
    int i,j;
    for (i=0;i<rowSize;i++){
        for (j=0;j<colSize;j++){
            ar[i][j] == ar[j][i];}
    }
}
// how to write code for ar[][4]??????
